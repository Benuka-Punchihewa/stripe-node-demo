<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="stylesheet" href="style.css" />
    <title>Prebuilt Card Payments</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <script src="https://js.stripe.com/v3/"></script>
  </head>
  <body>
    <a href="/">Go back to home</a>
    <h1>Card Saving Custom</h1>

    <!-- Display a payment form -->
    <form id="payment-form">
      <div id="payment-element">
        <!--Stripe.js injects the Payment Element-->
      </div>
      <br />
      <button id="submit">
        <div class="spinner hidden" id="spinner"></div>
        <span id="button-text">Pay now</span>
      </button>
      <div id="payment-message" class="hidden"></div>
    </form>
  </body>

  <script>
    const publishableKey = "<%= stripePublishableKey %>";
    const stripe = Stripe(publishableKey);

    document
      .getElementById("payment-form")
      .addEventListener("submit", handleSubmit);

    // Fetches a payment intent and captures the client secret
    const initialize = async () => {
      const response = await fetch("/setup-intent", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        //   body: JSON.stringify({ items }),
      });
      const { clientSecret } = await response.json();

      const appearance = {
        theme: "stripe",
      };
      elements = stripe.elements({ appearance, clientSecret });

      const paymentElement = elements.create("payment");
      paymentElement.mount("#payment-element");
    };

    async function handleSubmit(e) {
      e.preventDefault();

      const { error } = await stripe.confirmSetup({
        //`Elements` instance that was used to create the Payment Element
        elements,
        confirmParams: {
          return_url: "http://localhost:5000/card-saving-custom",
        },
      });

      if (error) {
        // This point will only be reached if there is an immediate error when
        // confirming the payment. Show error to your customer (for example, payment
        // details incomplete)
        alert(error.message);
      } else {
        // Your customer will be redirected to your `return_url`. For some payment
        // methods like iDEAL, your customer will be redirected to an intermediate
        // site first to authorize the payment, then redirected to the `return_url`.
      }
    }

    // Fetches the payment intent status after payment submission
    async function checkStatus() {
      // Retrieve the "setup_intent_client_secret" query parameter appended to
      // your return_url by Stripe.js
      const clientSecret = new URLSearchParams(window.location.search).get(
        "setup_intent_client_secret"
      );

      // Retrieve the SetupIntent
      stripe.retrieveSetupIntent(clientSecret).then(({ setupIntent }) => {
        // Inspect the SetupIntent `status` to indicate the status of the payment
        // to your customer.
        //
        // Some payment methods will [immediately succeed or fail][0] upon
        // confirmation, while others will first enter a `processing` state.
        //
        // [0]: https://stripe.com/docs/payments/payment-methods#payment-notification
        console.log(setupIntent);
        switch (setupIntent.status) {
          case "succeeded": {
            alert("Success! Your payment method has been saved.");
            break;
          }

          case "processing": {
            alert(
              "Processing payment details. We'll update you when processing is complete."
            );
            break;
          }

          case "requires_payment_method": {
            alert(
              "Failed to process payment details. Please try another payment method."
            );

            // Redirect your user back to your payment page to attempt collecting
            // payment again

            break;
          }
        }
      });
    }

    initialize();
    checkStatus();
  </script>
</html>
